#!/usr/bin/env bash

# TODO: use traps for graceful exits and cleanup
# TODO: set up git to track remote

set -o errexit # not a silver bullet
set -o nounset # errors on unbound variables

backup_and_clone() {
  REMOTE_URL="${1}"
  TARGET_DIR="${2}"

  NOW="$(date +%Y-%m%d-%H%M%S)"

  REMOTE_NAME="${REMOTE_URL##*/}" # get basename
  REMOTE_NAME="${REMOTE_NAME%.git}" # remove .git
  BARE_GIT_DIR="${TARGET_DIR}/.${REMOTE_NAME}.git" # add .git back
  TMP_DIR="${TARGET_DIR}/.${REMOTE_NAME}.tmp.${NOW}"

  echo "Preparing to clone to '${BARE_GIT_DIR}'"
  echo "Checking if '${BARE_GIT_DIR}' already exists"
  if [ -d "${BARE_GIT_DIR}" ]; then
    echo "'${BARE_GIT_DIR}' already exists"
    IFS= read -n 1 -rp "Overwrite? [y/N] " YN # IFS set to null so literal space readable to $YN; -r so that \ is literally \
    if [ "${YN}" != '' ]; then
      echo # newline after read unless null input (user hit enter)
    fi
    # using double bracket test for regex
    if [[ "${YN}" =~ ^[Yy]$ ]]; then
      echo "Removing old '${BARE_GIT_DIR}'"
      rm -rf "${BARE_GIT_DIR}"
    else
      echo "Aborting"
      exit 0
    fi
  else
    echo "'${BARE_GIT_DIR}' does not already exist"
  fi

  echo "Cloning from '${REMOTE_URL}' to new bare repository at '${BARE_GIT_DIR}'"
  git clone --bare "${REMOTE_URL}" "${BARE_GIT_DIR}"

  echo "Creating temorary directory '${TMP_DIR}'"
  mkdir "${TMP_DIR}" # TODO: exit on error (without -p flag, will error on the rare chance $TMP_DIR already exists)
  OLD_WD="$(pwd)"
  cd "${TMP_DIR}" # for checkout master .

  echo "Checking out dotfiles from bare repository, using '${TMP_DIR}' as working tree"
  git --git-dir="${BARE_GIT_DIR}" --work-tree="${TMP_DIR}" checkout master . # revert contents of current dir (.) to match master

  echo "Preparing to move the following dotfiles from the repository into the target directory '${TARGET_DIR}'"

  # find returns more useful results for our purposes when run from tmp dir
  # alternatively: could use find . -type f -exec but it could get kind of messy executing multiple commands in nested conditionals
  find . -type f -print0 | while IFS= read -r -d '' RESULT; do echo "> ${RESULT#./}"; done
  # ...using find -print0 to print results delimited by null instead of newline (allows for filenames containing newline)
  # ...setting env variable $IFS to null, to preserve leading / trailing filename whitespace
  # ...using read -d '' to read each null-delimited result into $SRC_FILE TODO: clarify what's best to represent null string $'\0' vs. ''
  # ...using read -r to avoid backslash interpretation in filenames (?)

  BK_DIR="${TARGET_DIR}/.${REMOTE_NAME}.bk/${NOW}"
  echo "Checking if any of the dotfiles already exist at the target directory"

  find . -type f -print0 | {
    # curly brace to work with variable $DO_BK in subshell created by pipe
    DO_BK=1
    while IFS= read -r -d '' SRC_FILE; do
      SRC_FILE="${SRC_FILE}" # either ./file or ./path/to/file (redeclared for clarity)
      SRC_DIR="${SRC_FILE%/*}" # either . or ./path/to
      TARGET_FILE="${TARGET_DIR}/${SRC_FILE}" # either /target/./file or /target/./path/to/file (might not actually exist)
      if [ -f "${TARGET_FILE}" ]; then
        if [ "${DO_BK}" -eq 1 ]; then
          DO_BK=0
          echo "Moving files to backup directory '${BK_DIR}'"
        fi
        echo "> ${SRC_FILE#./}"
        BK_SUBDIR="${BK_DIR}/${SRC_DIR}" # either /target/.name.bk/. or /target/.name.bk/./path/to
        mkdir -p "${BK_SUBDIR}" # create subdirs as necessary (including /target/name.bk/. itself if doesn't already exist)
        mv "${TARGET_FILE}" "${BK_SUBDIR}" # move to backup dir
      fi
    done
    if [ "${DO_BK}" -eq 1 ]; then
      echo "No local duplicates"
    fi
  }

  cd "${TARGET_DIR}" # for checkout master .
  echo "Checking out dotfiles from master, using '${TARGET_DIR}' as working tree"
  git --git-dir="${BARE_GIT_DIR}" --work-tree="${TARGET_DIR}" checkout master . # revert contents of current dir (.) to match master

  echo "Removing temporary directory '${TMP_DIR}'"
  rm -rf "${TMP_DIR}"

  if [ -d "${BK_DIR}" ]; then
    IFS= read -n 1 -rp "Keep backup? [Y/n] " YN
    if [ "${YN}" != '' ]; then
      echo
    fi
    if [[ "${YN}" =~ ^[Nn]$ ]]; then
      echo "Removing backup '${BK_DIR}'"
      rm -rf "${BK_DIR}"
    else
      echo "Keeping backup '${BK_DIR}'"
    fi
  fi

  cd "${OLD_WD}"
  echo "Done"
}

main() {
  REMOTE_URL="${1}"
  TARGET_DIR="${HOME}"

  backup_and_clone "${REMOTE_URL}" "${TARGET_DIR}"
}

if [ "$#" -gt "0" ]; then
  main "${1}"
else
  # TODO: case for argument is literally <url>, copy-pasted from readme
  echo "Need to supply <url> as argument"
  exit 1
fi
